// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kafka_source.proto

package flink.examples.datastream._04._3_4.protobuf;

/**
 * Protobuf type {@code flink.KafkaSourceModel}
 */
public  final class KafkaSourceModel extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flink.KafkaSourceModel)
        KafkaSourceModelOrBuilder {
  // Use KafkaSourceModel.newBuilder() to construct.
  private KafkaSourceModel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private KafkaSourceModel() {
    name_ = "";
    names_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private KafkaSourceModel(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              names_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            names_.add(s);
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              siMap_ = com.google.protobuf.MapField.newMapField(
                  SiMapDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000004;
            }
            com.google.protobuf.MapEntry<String, Integer>
            siMap__ = input.readMessage(
                SiMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            siMap_.getMutableMap().put(
                siMap__.getKey(), siMap__.getValue());
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        names_ = names_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KafkaSourceClass.internal_static_flink_KafkaSourceModel_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 7:
        return internalGetSiMap();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KafkaSourceClass.internal_static_flink_KafkaSourceModel_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            KafkaSourceModel.class, KafkaSourceModel.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile Object name_;
  /**
   * <code>optional string name = 1;</code>
   */
  public String getName() {
    Object ref = name_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <code>optional string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    Object ref = name_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NAMES_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList names_;
  /**
   * <code>repeated string names = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getNamesList() {
    return names_;
  }
  /**
   * <code>repeated string names = 2;</code>
   */
  public int getNamesCount() {
    return names_.size();
  }
  /**
   * <code>repeated string names = 2;</code>
   */
  public String getNames(int index) {
    return names_.get(index);
  }
  /**
   * <code>repeated string names = 2;</code>
   */
  public com.google.protobuf.ByteString
      getNamesBytes(int index) {
    return names_.getByteString(index);
  }

  public static final int SI_MAP_FIELD_NUMBER = 7;
  private static final class SiMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        String, Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<String, Integer>newDefaultInstance(
                KafkaSourceClass.internal_static_flink_KafkaSourceModel_SiMapEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapField<
      String, Integer> siMap_;
  private com.google.protobuf.MapField<String, Integer>
  internalGetSiMap() {
    if (siMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          SiMapDefaultEntryHolder.defaultEntry);
    }
    return siMap_;
  }

  public int getSiMapCount() {
    return internalGetSiMap().getMap().size();
  }
  /**
   * <code>map&lt;string, int32&gt; si_map = 7;</code>
   */

  public boolean containsSiMap(
      String key) {
    if (key == null) { throw new NullPointerException(); }
    return internalGetSiMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getSiMapMap()} instead.
   */
  @Deprecated
  public java.util.Map<String, Integer> getSiMap() {
    return getSiMapMap();
  }
  /**
   * <code>map&lt;string, int32&gt; si_map = 7;</code>
   */

  public java.util.Map<String, Integer> getSiMapMap() {
    return internalGetSiMap().getMap();
  }
  /**
   * <code>map&lt;string, int32&gt; si_map = 7;</code>
   */

  public int getSiMapOrDefault(
      String key,
      int defaultValue) {
    if (key == null) { throw new NullPointerException(); }
    java.util.Map<String, Integer> map =
        internalGetSiMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, int32&gt; si_map = 7;</code>
   */

  public int getSiMapOrThrow(
      String key) {
    if (key == null) { throw new NullPointerException(); }
    java.util.Map<String, Integer> map =
        internalGetSiMap().getMap();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    for (int i = 0; i < names_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, names_.getRaw(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetSiMap(),
        SiMapDefaultEntryHolder.defaultEntry,
        7);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < names_.size(); i++) {
        dataSize += computeStringSizeNoTag(names_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getNamesList().size();
    }
    for (java.util.Map.Entry<String, Integer> entry
         : internalGetSiMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<String, Integer>
      siMap__ = SiMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, siMap__);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof KafkaSourceModel)) {
      return super.equals(obj);
    }
    KafkaSourceModel other = (KafkaSourceModel) obj;

    boolean result = true;
    result = result && getName()
        .equals(other.getName());
    result = result && getNamesList()
        .equals(other.getNamesList());
    result = result && internalGetSiMap().equals(
        other.internalGetSiMap());
    return result;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (getNamesCount() > 0) {
      hash = (37 * hash) + NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getNamesList().hashCode();
    }
    if (!internalGetSiMap().getMap().isEmpty()) {
      hash = (37 * hash) + SI_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetSiMap().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static KafkaSourceModel parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static KafkaSourceModel parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static KafkaSourceModel parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static KafkaSourceModel parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static KafkaSourceModel parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static KafkaSourceModel parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static KafkaSourceModel parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static KafkaSourceModel parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static KafkaSourceModel parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static KafkaSourceModel parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(KafkaSourceModel prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code flink.KafkaSourceModel}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flink.KafkaSourceModel)
          KafkaSourceModelOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KafkaSourceClass.internal_static_flink_KafkaSourceModel_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetSiMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetMutableSiMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KafkaSourceClass.internal_static_flink_KafkaSourceModel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              KafkaSourceModel.class, KafkaSourceModel.Builder.class);
    }

    // Construct using flink.examples.datastream._04._3_4.protobuf.KafkaSourceModel.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      names_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableSiMap().clear();
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KafkaSourceClass.internal_static_flink_KafkaSourceModel_descriptor;
    }

    public KafkaSourceModel getDefaultInstanceForType() {
      return KafkaSourceModel.getDefaultInstance();
    }

    public KafkaSourceModel build() {
      KafkaSourceModel result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public KafkaSourceModel buildPartial() {
      KafkaSourceModel result = new KafkaSourceModel(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        names_ = names_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.names_ = names_;
      result.siMap_ = internalGetSiMap();
      result.siMap_.makeImmutable();
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof KafkaSourceModel) {
        return mergeFrom((KafkaSourceModel)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(KafkaSourceModel other) {
      if (other == KafkaSourceModel.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.names_.isEmpty()) {
        if (names_.isEmpty()) {
          names_ = other.names_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureNamesIsMutable();
          names_.addAll(other.names_);
        }
        onChanged();
      }
      internalGetMutableSiMap().mergeFrom(
          other.internalGetSiMap());
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      KafkaSourceModel parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (KafkaSourceModel) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private Object name_ = "";
    /**
     * <code>optional string name = 1;</code>
     */
    public String getName() {
      Object ref = name_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public Builder setName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public Builder clearName() {

      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      name_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList names_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureNamesIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        names_ = new com.google.protobuf.LazyStringArrayList(names_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getNamesList() {
      return names_.getUnmodifiableView();
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public int getNamesCount() {
      return names_.size();
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public String getNames(int index) {
      return names_.get(index);
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNamesBytes(int index) {
      return names_.getByteString(index);
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public Builder setNames(
        int index, String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureNamesIsMutable();
      names_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public Builder addNames(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureNamesIsMutable();
      names_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public Builder addAllNames(
        Iterable<String> values) {
      ensureNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, names_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public Builder clearNames() {
      names_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string names = 2;</code>
     */
    public Builder addNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureNamesIsMutable();
      names_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        String, Integer> siMap_;
    private com.google.protobuf.MapField<String, Integer>
    internalGetSiMap() {
      if (siMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SiMapDefaultEntryHolder.defaultEntry);
      }
      return siMap_;
    }
    private com.google.protobuf.MapField<String, Integer>
    internalGetMutableSiMap() {
      onChanged();;
      if (siMap_ == null) {
        siMap_ = com.google.protobuf.MapField.newMapField(
            SiMapDefaultEntryHolder.defaultEntry);
      }
      if (!siMap_.isMutable()) {
        siMap_ = siMap_.copy();
      }
      return siMap_;
    }

    public int getSiMapCount() {
      return internalGetSiMap().getMap().size();
    }
    /**
     * <code>map&lt;string, int32&gt; si_map = 7;</code>
     */

    public boolean containsSiMap(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetSiMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSiMapMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, Integer> getSiMap() {
      return getSiMapMap();
    }
    /**
     * <code>map&lt;string, int32&gt; si_map = 7;</code>
     */

    public java.util.Map<String, Integer> getSiMapMap() {
      return internalGetSiMap().getMap();
    }
    /**
     * <code>map&lt;string, int32&gt; si_map = 7;</code>
     */

    public int getSiMapOrDefault(
        String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Integer> map =
          internalGetSiMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int32&gt; si_map = 7;</code>
     */

    public int getSiMapOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Integer> map =
          internalGetSiMap().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearSiMap() {
      getMutableSiMap().clear();
      return this;
    }
    /**
     * <code>map&lt;string, int32&gt; si_map = 7;</code>
     */

    public Builder removeSiMap(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      getMutableSiMap().remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @Deprecated
    public java.util.Map<String, Integer>
    getMutableSiMap() {
      return internalGetMutableSiMap().getMutableMap();
    }
    /**
     * <code>map&lt;string, int32&gt; si_map = 7;</code>
     */
    public Builder putSiMap(
        String key,
        int value) {
      if (key == null) { throw new NullPointerException(); }

      getMutableSiMap().put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, int32&gt; si_map = 7;</code>
     */

    public Builder putAllSiMap(
        java.util.Map<String, Integer> values) {
      getMutableSiMap().putAll(values);
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:flink.KafkaSourceModel)
  }

  // @@protoc_insertion_point(class_scope:flink.KafkaSourceModel)
  private static final KafkaSourceModel DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new KafkaSourceModel();
  }

  public static KafkaSourceModel getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KafkaSourceModel>
      PARSER = new com.google.protobuf.AbstractParser<KafkaSourceModel>() {
    public KafkaSourceModel parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new KafkaSourceModel(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<KafkaSourceModel> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<KafkaSourceModel> getParserForType() {
    return PARSER;
  }

  public KafkaSourceModel getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

